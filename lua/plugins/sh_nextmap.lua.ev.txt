/*-------------------------------------------------------------------------------------------------------------------------
	Change the map
-------------------------------------------------------------------------------------------------------------------------*/

local PLUGIN = {}
PLUGIN.Title = "Next Map"
PLUGIN.Description = "Change to the next map."
PLUGIN.Author = "Mwr247"
PLUGIN.Commands = {"nextmap"}
PLUGIN.Privileges = { "Nextmap" }

function PLUGIN:Call( ply, args )
	if ( ply:EV_HasPrivilege( self.Privileges[1] ) ) then
		//local maplist = string.Explode("\n",string.Replace(string.Trim(file.Read("mapcycle_zombiesurvival.txt","GAME"),"\n"),"\r",""))
    local tempmap=game.GetMapNext()
    if evolve.mapcycle then
      local min=math.Clamp(math.ceil(table.Count(player.GetAll())/16),1,3);
      local max=math.Clamp(math.ceil((table.Count(player.GetAll())+8)/16),1,3);
      local cutoff = evolve:Time() - 60 * 60 * 2
      local maplist = table.Copy(evolve.mapcycle)
      local mapcycle = {}
      for k,v in pairs(evolve.mapcycle) do
        local pick = math.random(1, #maplist)
        table.insert(mapcycle, maplist[pick])
        table.remove(maplist, pick)
      end
      for k,v in pairs(mapcycle) do
        if ( v[1] == game.GetMap() or tonumber(v[2]) == 0 or !file.Exists("maps/"..v[1]..".bsp","GAME") ) then continue end
				local realmax=math.Clamp(math.max(tonumber(v[3]),tonumber(v[4])),1,3)
				if ( tonumber(v[3])>=min and realmax<=max ) then
          if (tonumber(v[7])<cutoff) then
            table.insert(maplist, v[1])
          end
        end
      end
      tempmap = maplist[ math.random( #maplist ) ]
      print("Evolve++ mapcycle(" .. min .. ", " .. max .. ") map chosen (of " .. #maplist .. "): " .. tempmap)
    end
		evolve:Notify( evolve.colors.blue, ply:Nick(), evolve.colors.white, " has changed the map to ", evolve.colors.red, tempmap, evolve.colors.white, "." )

		timer.Simple( 0.5, function()
			RunConsoleCommand( "changelevel", tempmap )
		end )
	else
		evolve:Notify( ply, evolve.colors.red, evolve.constants.notallowed )
	end
end

function PLUGIN:Menu( arg, players )
	return self.Title, evolve.category.administration
end

evolve:RegisterPlugin( PLUGIN )
